// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// models

model Tenant {
  id         String   @id @default(uuid())
  name       String
  address    String
  logo       String?
  adminEmail String
  config     Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users     User[]
  subjects  Subject[]
  teachers  Teacher[]
  standards Standard[]
  students  Student[]
  timetableSlots TimetableSlot[]
  divisions Division[]
  timeTableConfigs TimeTableConfig[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  tenantId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  code        String?
  description String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  teachers       Teacher[]       @relation("TeacherSubjects")
  timetableSlots TimetableSlot[]

  @@unique([name, tenantId])
}

model Teacher {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  subjects       Subject[]       @relation("TeacherSubjects")
  classDivisions Division[]      @relation("ClassTeacher")
  timetableSlots TimetableSlot[]
}

model Standard {
  id        String   @id @default(uuid())
  level     Int // 1-12
  category  String // Primary, Middle, High
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  divisions Division[]
  students  Student[]

  @@unique([level, tenantId])
}

model Division {
  id              String   @id @default(uuid())
  name            String // A, B, C, D, etc.
  studentCapacity Int
  standardId      String
  tenantId        String
  classTeacherId  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  standard       Standard        @relation(fields: [standardId], references: [id])
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  classTeacher   Teacher?        @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  students       Student[]
  timetableSlots TimetableSlot[]

  @@unique([name, standardId, tenantId])
}

model Student {
  id                String   @id @default(uuid())
  name              String   @db.VarChar(100)
  dateOfBirth       DateTime
  admissionDate     DateTime
  rollNumber        String   @db.VarChar(20)
  currentStandardId String
  currentDivisionId String
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  currentStandard Standard @relation(fields: [currentStandardId], references: [id])
  currentDivision Division @relation(fields: [currentDivisionId], references: [id])

  @@unique([rollNumber, tenantId])
  @@index([currentStandardId, currentDivisionId])
}

model TimetableSlot {
  id           String   @id @default(uuid())
  tenantId     String
  divisionId   String
  dayOfWeek    DayOfWeek
  periodNumber Int @db.SmallInt
  startTime    String
  endTime      String
  duration     Int @db.SmallInt
  subjectId    String
  teacherId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  division Division @relation(fields: [divisionId], references: [id])
  subject  Subject  @relation(fields: [subjectId], references: [id])
  teacher  Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([divisionId, dayOfWeek, periodNumber])
  @@index([tenantId])
}


model TimeTableConfig {
  id             String   @id @default(uuid())
  tenantId       String   @unique
  periodsPerDay  Int      @db.SmallInt
  defaultDuration Int     @db.SmallInt
  startTime      String   // School day start time
  endTime        String   // School day end time
  breakSlots     Json[]   // Array of break slots
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}